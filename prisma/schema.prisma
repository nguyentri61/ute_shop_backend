generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  NEW             // đơn hàng mới (vừa đặt)
  CONFIRMED       // đã xác nhận (thủ công hoặc tự động 30 phút sau)
  PREPARING       // shop đang chuẩn bị hàng (bước 3)
  SHIPPING        // đang giao hàng
  DELIVERED       // đã giao thành công
  CANCELLED       // đã hủy
  CANCEL_REQUEST  // yêu cầu hủy gửi tới shop (khi ở PREPARING mà user muốn hủy)
}

model category {
  id        String    @id @default(uuid())
  name      String
  icon      String?
  createdAt DateTime  @default(now())
  product   product[]
}

model order {
  id        String    @id @default(uuid())
  userId    String
  address   String
  phone     String
  createdAt DateTime  @default(now())
  subTotal  Float     @default(0)
  shippingFee Float   @default(0)
  shippingDiscount Float @default(0)
  productDiscount Float @default(0)
  total     Float     @default(0)
  status    OrderStatus @default(NEW)

  user  user        @relation(fields: [userId], references: [id])
  items orderItem[]
  coupons coupon[]
  statusHistory     orderStatusHistory[]
}

model orderItem {
  id         String @id @default(uuid())
  orderId    String @map("order_id")
  variantId  String 
  quantity   Int
  price      Float @default(0)

  order    order    @relation(fields: [orderId], references: [id])
  variant  productVariant @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@index([variantId])

}

model product {
  id            String           @id @default(uuid())
  name          String
  description   String?
  viewCount     Int              @default(0)
  createdAt     DateTime         @default(now())
  categoryId    String
  category      category         @relation(fields: [categoryId], references: [id], map: "Product_categoryId_fkey")
  productImage  productImage[]
  variants      productVariant[]
  reviews       review[]
  favorites     favorite[]
  recentlyViewed recentlyViewed[]
  @@index([categoryId], map: "Product_categoryId_fkey")
}

model productImage {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   product @relation(fields: [productId], references: [id], map: "ProductImage_productId_fkey")

  @@index([productId], map: "ProductImage_productId_fkey")
}

model productVariant {
  id            String  @id @default(uuid())
  productId     String
  color         String?
  size          String?
  stock         Int
  price         Float
  discountPrice Float?

  product   product    @relation(fields: [productId], references: [id])
  cartItems cartItem[]
  orderItems orderItem[]

  @@index([productId])
}

model cartItem {
  id        String   @id @default(uuid())
  userId    String
  variantId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  user      user           @relation(fields: [userId], references: [id])
  variant   productVariant @relation(fields: [variantId], references: [id])

  @@unique([userId, variantId]) // 1 user chỉ có 1 cartItem cho 1 variant
  @@index([userId])
  @@index([variantId])

}

enum UserRole {
  USER
  ADMIN
}

model user {
  id        String    @id @default(uuid())
  email     String    @unique(map: "User_email_key")
  password  String
  otp       String?
  otpExpiry DateTime?
  verified  Boolean   @default(false)
  createdAt DateTime  @default(now())
  address   String?
  fullName  String?
  gender    String?
  phone    String?
  role      UserRole  @default(USER)

  orders order[]
  cart   cartItem[]
  reviews  review[]   
  coupons  coupon[]
  favorites favorite[]
  recentlyViewed recentlyViewed[]
  notifications   notification[] 
  // Quan hệ ngược với Conversation.user
  conversations conversation[] @relation("UserConversations")

  // Quan hệ ngược với Message.sender
  sentMessages message[] @relation("SentMessages")
}

model review {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  rating     Int       // số sao (1-5)
  comment    String?   // nội dung bình luận
  createdAt  DateTime  @default(now())

  user    user    @relation(fields: [userId], references: [id])
  product product @relation(fields: [productId], references: [id])

  @@index([userId])
  @@index([productId])
}

enum CouponType {
  SHIPPING
  PRODUCT
}

model coupon {
  id          String   @id @default(uuid())
  code        String   
  type        CouponType   @default(PRODUCT)
  description String
  discount    Float    // % giảm giá hoặc số tiền
  minOrderValue Float
  expiredAt   DateTime
  orderId     String? 
  userId      String?   // mã giảm giá gắn cho user nào

  order order? @relation(fields: [orderId], references: [id])
  user user? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([orderId])
}

model favorite {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    user    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // 1 user chỉ có thể thích 1 sản phẩm 1 lần
  @@index([userId])
  @@index([productId])
}

model recentlyViewed {
  id        String   @id @default(uuid())
  userId    String
  productId String
  viewedAt  DateTime @default(now())

  user    user    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
  @@index([viewedAt])
}

model notification {
  id          String   @id @default(uuid())
  message     String                    // nội dung thông báo
  type        String   @default("info") // loại: info, success, warning, error
  link        String?                   // link đến trang chi tiết (VD: /order/123)
  isRead      Boolean  @default(false)  // trạng thái đã đọc hay chưa
  createdAt   DateTime @default(now())

  // Nếu gửi cho 1 user cụ thể
  userId      String? 
  user        user?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Nếu gửi cho admin toàn hệ thống (tùy chọn)
  isForAdmin  Boolean  @default(false)

  @@index([userId])
  @@index([createdAt])
}

model orderStatusHistory {
  id        String   @id @default(uuid())
  orderId   String
  status    String
  createdAt DateTime @default(now())

  order     order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
// Enum cho loại tin nhắn (hỗ trợ ảnh/video)
enum MessageType {
  TEXT
  IMAGE
  VIDEO
}

// Model Conversation (Cuộc hội thoại)
// Mỗi cuộc hội thoại là giữa 1 User (khách) và Admin
model conversation {
  id     String @id @default(uuid())
  
  // User (khách hàng) sở hữu cuộc hội thoại này
  // Khi User bị xóa, hội thoại của họ cũng bị xóa (onDelete: Cascade)
  user   user   @relation("UserConversations", fields: [userId], references: [id], onDelete: Cascade)
  userId String // Foreign key (chỉ tới user khách hàng)

  // Danh sách các tin nhắn trong hội thoại
  messages message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) // Index để tìm hội thoại của user nhanh hơn
}

// Model Message (Tin nhắn)
model message {
  id     String @id @default(uuid())
  
  // Hội thoại mà tin nhắn này thuộc về
  conversation   conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String       // Foreign key

  // Người gửi (có thể là User khách, hoặc User có role ADMIN)
  // onDelete: NoAction để nếu xóa User, tin nhắn vẫn còn (để lưu trữ)
  sender   user   @relation("SentMessages", fields: [senderId], references: [id], onDelete: NoAction)
  senderId String // Foreign key (chỉ tới user gửi)

  // Loại tin nhắn: TEXT, IMAGE, VIDEO
  type MessageType @default(TEXT)

  // Nội dung (nếu là TEXT)
  // @db.Text hỗ trợ nội dung dài
  content String? @db.Text

  // Đường dẫn file (nếu là IMAGE hoặc VIDEO)
  mediaUrl String?

  // Trạng thái đã đọc
  // Mặc định là false, khi người nhận (admin hoặc user) vào xem thì cập nhật true
  isRead Boolean @default(false)

  createdAt DateTime @default(now())

  @@index([conversationId]) // Index để load tin nhắn theo hội thoại
  @@index([senderId])
}