import { PrismaClient } from "@prisma/client";
const prisma = new PrismaClient();

/* ========== CONVERSATION REPOSITORY ========== */

// ðŸ”¹ Táº¡o há»™i thoáº¡i má»›i cho user (náº¿u chÆ°a cÃ³)
export const createConversationForUser = async (userId) => {
  return await prisma.conversation.create({
    data: { userId },
  });
};

// ðŸ”¹ Láº¥y táº¥t cáº£ há»™i thoáº¡i (dÃ nh cho ADMIN): include user vÃ  messages
export const findAll = async (userId) => {
  const conversations = await prisma.conversation.findMany({
    include: {
      user: {
        select: {
          id: true,
          fullName: true,
          email: true,
        },
      },
      messages: {
        select: {
          id: true,
          content: true,
          isRead: true,
          senderId: true,
          createdAt: true,
          type: true,
        },
        orderBy: { createdAt: "desc" }, // tin nháº¯n cÅ© nháº¥t trÆ°á»›c
      },
    },
    orderBy: { updatedAt: "desc" },
  });

  return conversations.map((c) => {
    const firstMessage = c.messages[0] || null;
    const unreadMessages = c.messages.filter(
      (m) => !m.isRead && m.senderId !== userId
    );

    return {
      id: c.id,
      user: c.user,
      createdAt: c.createdAt,
      updatedAt: c.updatedAt,
      firstMessage,
      unreadCount: unreadMessages.length,
    };
  });
};

// ðŸ”¹ Láº¥y há»™i thoáº¡i theo userId (náº¿u chÆ°a cÃ³ thÃ¬ tráº£ null)
export const findByUserId = async (userId) => {
  return await prisma.conversation.findFirst({
    where: { userId },
    include: {
      messages: {
        orderBy: { createdAt: "asc" },
      },
    },
  });
};

// ðŸ”¹ Láº¥y há»™i thoáº¡i theo id
export const findById = async (id) => {
  return await prisma.conversation.findUnique({
    where: { id },
    include: {
      messages: {
        orderBy: { createdAt: "asc" },
      },
    },
  });
};

export const markAllAsRead = async (conversationId, userId) => {
  const result = await prisma.message.updateMany({
    where: {
      conversationId,
      senderId: { not: userId },
      isRead: false,
    },
    data: { isRead: true },
  });

  return result; // { count: <sá»‘ tin nháº¯n Ä‘Æ°á»£c cáº­p nháº­t> }
};
